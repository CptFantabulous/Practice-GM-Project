<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//cursor location
gridX = 0
gridY = 0
//the node we are currently on
hoverNode = noone
//the actor we are clicked on
selectedActor = noone
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//where the mouse currently is

x = mouse_x
y = mouse_y
//find where we are on the grid
gridX = floor(x/GRID_SIZE)
gridY = floor(y/GRID_SIZE)

if(gridX &lt; 0 || gridY &lt; 0 || gridX &gt;= room_width/GRID_SIZE || gridY &gt;= room_height/GRID_SIZE) // if you go off the edge then hover node is null
{
    hoverNode = noone
}
else // else it is whatever node you are currently over
{
    hoverNode = map[gridX, gridY]
}

//Select actor with left click

if(mouse_check_button_pressed(mb_left)) //if they have clicked the left mouse
{
    if(hoverNode.occupant != noone)//and there is someone to select on the node
    {
        if(hoverNode.occupant != selectedActor)
        {
        selectedActor = hoverNode.occupant
        selectedActor.actions = 2
        Movement_Range(hoverNode, selectedActor.move,selectedActor.actions)
        }
    }
    else
    {
        selectedActor = noone
        Wipe_Nodes()
    }
}

//right click for movement[TBH IMPORVED]
if(mouse_check_button_pressed(mb_right))
{
    if(selectedActor != noone &amp;&amp; hoverNode.moveNode)
    {
        //our current node
        current = hoverNode
        //create priority cue
        path = ds_priority_create()
        //add current node to cue
        ds_priority_add(path, current, current.G)
        
        //step through each node, parent to parent, until done
        while(current.parent != noone)
        {
            //add parent node to quie, priority equal to G score
            ds_priority_add(path, current.parent,current.parent.G)
            
            //set current equal to currents parent, to start over
            current = current.parent
        }
        do{
            //delete lowest priorty node (closest to actors) store id in current
            current = ds_priority_delete_min(path)
            
            //add currents node to sprite coordinates to selectedActors path
            path_add_point(selectedActor.movementPath,current.x,current.y,100)
        }until(ds_priority_empty(path))
        
        //clean up 
        ds_priority_destroy(path)
        
        //first clear the node of selectedActor
        map[selectedActor.gridX, selectedActor.gridY].occupant = noone
        
        //update slectedActrs grid cords
        selectedActor.gridX = gridX
        selectedActor.gridY = gridY
        
        //update selectedActors future node
        hoverNode.occupant = selectedActor
        
        //send selected actor on its way
        selectedActor.state = "begin path"
        
        //reduce selected actors and wipe nodes
        if(hoverNode.G &gt; selectedActor.move)
        {
            selectedActor.actions -= 2
        }
        else
        {
            selectedActor.actions -=1
            Wipe_Nodes()
        }
        selectedActor = noone
        }
    else
    {
        selectedActor = noone
        Wipe_Nodes()
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hoverNode != noone)
{
    draw_sprite(sSelected, -1, gridX * GRID_SIZE, gridY* GRID_SIZE)
}

draw_self()
draw_set_colour(c_black)

if(hoverNode != noone)
{
    tempText = string(gridX) + " / " + string(gridY) + " = "
    if(hoverNode.occupant != noone)
    {
        tempText += hoverNode.occupant.name
    }
    else
    {
        tempText += "noone"
    }
    draw_rectangle(0,0, string_width(tempText), string_height(tempText), false)
    draw_set_colour(c_white)
    draw_text(0,0, tempText)
    
    tempText = hoverNode.type
    
    if(hoverNode.passable)
    {
        tempText = " passable = true " + "cost = " + string(hoverNode.cost)
    }
    draw_set_colour(c_black)
    draw_rectangle(0, 20, string_width(tempText), 20 + string_height(tempText), false)
    draw_set_colour(c_white)
    draw_text(0, 20, tempText)
}

if(selectedActor != noone)
{
    tempText = selectedActor.name
    draw_set_colour(c_black)
    draw_rectangle(0, room_height, string_width(tempText), room_height - string_height(tempText), false)
    draw_set_colour(c_white)
    draw_text(0, room_height - string_height(tempText), tempText)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
