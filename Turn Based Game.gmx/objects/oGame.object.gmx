<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = "intialising"

globalvar map; //our 2d array for keeping track of all of the nodes

mapWidth = room_width/GRID_SIZE;
mapHeight = room_height/GRID_SIZE;

//creating the grid and the nodes

for(xx = 0; xx &lt; mapWidth; xx++) //fill the screen with nodes, saving them to the maps array
{
    for(yy = 0; yy &lt; mapHeight; yy++)
    {
        map[xx,yy] = instance_create(xx * GRID_SIZE, yy * GRID_SIZE, oNode)
        map[xx, yy].gridX = xx
        map[xx, yy].gridY = yy
    }
}
//populate the neighbors list
for(xx = 0; xx &lt; mapWidth; xx++)
{
    for(yy = 0; yy &lt; mapHeight; yy++)
    {
        node = map[xx,yy]; //store our current node
        //add left neighbor
        if(xx &gt; 0)
        {
            ds_list_add(node.neighbors, map[xx - 1, yy])
        }
        //add right neighbor
        if(xx &lt; mapWidth - 1)
        {
            ds_list_add(node.neighbors, map[xx + 1, yy])
        }
        //add top neighbor
        if(yy &gt; 0)
        {
            ds_list_add(node.neighbors, map[xx, yy - 1])
        }
        //add bottom neighbor
        if(yy &lt; mapHeight - 1)
        {
            ds_list_add(node.neighbors, map[xx, yy + 1])
        }
        
        //top left
        if(xx &gt; 0 &amp;&amp; yy &gt; 0)
        {
            ds_list_add(node.neighbors, map[xx - 1, yy - 1])
        }
        
        //top right
        if(xx &lt; mapWidth - 1 &amp;&amp; yy &gt; 0)
        {
            ds_list_add(node.neighbors, map[xx + 1, yy - 1])
        }
        
        //bottom left
        if(xx &gt; 0 &amp;&amp; yy &lt; mapHeight - 1)
        {
            ds_list_add(node.neighbors, map[xx - 1, yy + 1])
        }
        
        //bottom left
        if(xx &lt; mapWidth - 1 &amp;&amp; yy &lt; mapHeight - 1)
        {
            ds_list_add(node.neighbors, map[xx + 1, yy + 1])
        }
    }
}

//create the mouse

instance_create(x, y, oCursor)

//add players[REPLACE SOON]

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state)
{
    case "intialising":
with(oNode)
{
//code for checking what type of node to build
    if(instance_position(x + 16, y + 16, oTerrain))
    {
        tempTerrain = instance_position(x + 16, y + 16, oTerrain) //get what is currently at this postion
        
            switch(tempTerrain.type)
            {
            //depending on what type of node it is take on its qualities.
                case "wall": 
                    type = "wall"
                    sprite_index = sWall
                    passable = false
                    
                    break
                    
                case "rubble":
                    type = "rubble"
                    sprite_index = sRubble
                    cost = 2
                    break
                    
                    
            }
            
            with(tempTerrain) //then destroy the placeholder 
            {
                instance_destroy()
            }
            
        }
          if(instance_position(x + 16, y + 16, oActor))
            {
                occupant = instance_position(x + 16, y + 16, oActor)
                occupant.gridX = gridX
                occupant.gridY = gridY
            }
    }
    state = "ready"
    break
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
